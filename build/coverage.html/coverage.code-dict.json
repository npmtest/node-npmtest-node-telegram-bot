{"/home/travis/build/npmtest/node-npmtest-node-telegram-bot/test.js":"/* istanbul instrument in package npmtest_node_telegram_bot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot/lib.npmtest_node_telegram_bot.js":"/* istanbul instrument in package npmtest_node_telegram_bot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_telegram_bot = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_telegram_bot = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-telegram-bot && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_telegram_bot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_telegram_bot\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_telegram_bot.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_telegram_bot.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_telegram_bot.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_telegram_bot.__dirname + '/lib.npmtest_node_telegram_bot.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot/node_modules/node-telegram-bot/index.js":"module.exports = require('./lib/Bot');","/home/travis/build/npmtest/node-npmtest-node-telegram-bot/node_modules/node-telegram-bot/lib/Bot.js":"'use strict'\n\nvar EventEmitter = require('events').EventEmitter\n  , debug = require('debug')('node-telegram-bot')\n  , util = require('util')\n  , request = require('request')\n  , fs = require('fs')\n  , path = require('path')\n  , qs = require('querystring')\n  , Q = require('q')\n  , botanio = require('botanio-node')\n  , mime = require('mime');\n\n/**\n * Constructor for Telegram Bot API Client.\n *\n * @class Bot\n * @constructor\n * @param {Object} options        Configurations for the client\n * @param {String} options.token  Bot token\n *\n * @see https://core.telegram.org/bots/api\n */\nfunction Bot(options) {\n  this.base_url = 'https://api.telegram.org/';\n  this.id = '';\n  this.first_name = '';\n  this.username = '';\n  this.token = options.token;\n  this.offset = options.offset ? options.offset : 0;\n  this.interval = options.interval ? options.interval : 500;\n  this.webhook = options.webhook ? options.webhook : false;\n  this.parseCommand = options.parseCommand ? options.parseCommand : true;\n  this.maxAttempts = options.maxAttempts ? options.maxAttempts : 5;\n  this.polling = false;\n  this.pollingRequest = null;\n  this.analytics = null;\n  this.timeout = options.timeout ? options.timeout : 60; //specify in seconds\n}\n\nutil.inherits(Bot, EventEmitter);\n\n/**\n * This callback occur after client request for a certain webservice.\n *\n * @callback Bot~requestCallback\n * @param {Error}   Error during request\n * @param {Object}  Response from Telegram service\n */\nBot.prototype._get = function (options, callback) {\n  var self = this;\n  var url = this.base_url + 'bot' + this.token + '/' + options.method;\n\n  if (options.params) {\n    url += '?' + qs.stringify(options.params);\n  }\n\n  var attempt = 1;\n\n  function retry() {\n    request.get({\n      url: url,\n      json: true\n    }, function (err, res, body) {\n      if (err) {\n        if (err.code === 'ENOTFOUND' && attempt < self.maxAttempts) {\n        ++attempt;\n        self.emit('retry', attempt);\n        retry();\n        } else {\n          callback(err);\n        }\n      } else {\n        callback(null, body);\n      }\n    });\n  }\n\n  retry();\n\n  return this;\n};\n\n/**\n * To perform multipart request e.g. file upload\n *\n * @callback Bot~requestCallback\n * @param {Error}   Error during request\n * @param {Object}  Response from Telegram service\n */\nBot.prototype._multipart = function (options, callback) {\n  var self = this;\n  var url = this.base_url + 'bot' + this.token + '/' + options.method;\n\n  var attempt = 1;\n\n  function retry() {\n    var req = request.post(url, function (err, res, body) {\n      if (err) {\n        if (err.code === 'ENOTFOUND' && attempt < self.maxAttempts) {\n          ++attempt;\n          self.emit('retry', attempt);\n          retry();\n        } else {\n          callback(err);\n        }\n      } else {\n        var contentType = res.headers['content-type'];\n\n        if (contentType.indexOf('application/json') >= 0) {\n          try {\n            body = JSON.parse(body);\n          } catch (e) {\n            callback(e, body);\n          }\n        }\n\n        callback(null, body);\n      }\n    });\n\n    var form = req.form()\n      , filename\n      , type\n      , stream\n      , contentType;\n\n    var arr = Object.keys(options.files);\n\n    if (arr.indexOf('stream') > -1) {\n      type = options.files['type'];\n      filename = options.files['filename'];\n      stream = options.files['stream'];\n      contentType = options.files['contentType'];\n    } else {\n      arr.forEach(function (key) {\n        var file = options.files[key];\n        type = key;\n        filename = path.basename(file);\n        stream = fs.createReadStream(file);\n        contentType = mime.lookup(file);\n      })\n    }\n\n    form.append(type, stream, {\n      filename: filename,\n      contentType: contentType\n    });\n\n    Object.keys(options.params).forEach(function (key) {\n      if (options.params[key]) {\n        form.append(key, options.params[key]);\n      }\n    });\n  }\n\n  retry();\n\n  return this;\n};\n\n/**\n * Temporary solution to set webhook\n *\n * @param {Error}   Error during request\n * @param {Object}  Response from Telegram service\n */\nBot.prototype._setWebhook = function (webhook) {\n  var self = this;\n  var url = this.base_url + 'bot' + this.token + '/setWebhook' + \"?\" + qs.stringify({url: webhook});\n\n  request.get({\n    url: url,\n    json: true\n  }, function (err, res, body) {\n    if (!err && res && res.statusCode === 200) {\n      if (body.ok) {\n      \tdebug(\"Set webhook to \" + self.webhook);\n\t\t\t} else {\n\t\t\t\tdebug(\"Body not ok\");\n\t\t\t\tdebug(body);\n\t\t\t}\n    } else if(res && res.hasOwnProperty('statusCode') && res.statusCode === 401){\n      debug(err);\n      debug(\"Failed to set webhook with code\" + res.statusCode);\n    } else {\n      debug(err);\n      debug(\"Failed to set webhook with unknown error\");\n    }\n  });\n}\n\n/**\n * Start polling for messages\n *\n * @return {Bot} Self\n */\nBot.prototype._poll = function () {\n  var self = this;\n  var url = self.base_url + 'bot' + self.token + '/getUpdates?timeout=' + self.timeout + '&offset=' + self.offset;\n\n  self.pollingRequest = null;\n  if (self.polling) {\n    debug(\"Poll\");\n\n    self.pollingRequest = request.get({\n      url: url,\n      timeout: self.timeout * 1000,\n      json: true\n    }, function (err, res, body) {\n\n      if (err && err.code !== 'ETIMEDOUT') {\n        self.emit('error', err);\n      } else if (res && res.statusCode === 200) {\n        if (body.ok) {\n          body.result.forEach(function (msg) {\n            if (msg.update_id >= self.offset) {\n              self.offset = msg.update_id + 1;\n\n              if (self.parseCommand) {\n                if (msg.message.text && msg.message.text.charAt(0) === '/') {\n                  /**\n                   * Split the message on space and @\n                   * Zero part = complete message\n                   * First part = command with leading /\n                   * Third part = target or empty \"\"\n                   * Fourth part = arguments or empty \"\"\n                   */\n                  var messageParts = msg.message.text.match(/([^@ ]*)([^ ]*)[ ]?(.*)/);\n\n                  // Filter everything not alphaNum out of the command\n                  var command = messageParts[1].replace(/[^a-zA-Z0-9 ]/g, \"\");\n                  // Target incl @ sign or null\n                  var target = (messageParts[2] !== \"\" ? messageParts[2]: null);\n                  // Optional arguments or null\n                  var args = (messageParts[3] !== \"\" ? messageParts[3].split(' '): null);\n\n                  self.emit(command, msg.message, args, target);\n                }\n              }\n\n              if (self.analytics !== null) {\n                self.analytics.track(msg.message);\n              }\n\n              self.emit('message', msg.message);\n            }\n          });\n        }\n\n        if (self.polling) {\n            self._poll();\n        }\n\n      } else if(res && res.hasOwnProperty('statusCode') && res.statusCode === 401) {\n        self.emit('error', new Error('Invalid token.'));\n      } else if(res && res.hasOwnProperty('statusCode') && res.statusCode === 409) {\n        self.emit('error', new Error('Duplicate token.'));\n      } else if(res && res.hasOwnProperty('statusCode') && res.statusCode === 502) {\n        self.emit('error', new Error('Gateway error.'));\n      } else if(self.pollingRequest && !self.pollingRequest._aborted) { //Skip error throwing, this is an abort due to stopping\n        self.emit('error', new Error(util.format('Unknown error')));\n      }\n    });\n  }\n\n  return self;\n};\n\n/**\n * Bot start receiving activities\n *\n * @return {Bot} Self\n */\nBot.prototype.start = function () {\n  var self = this;\n  if (self.webhook) {\n      self._setWebhook(this.webhook);\n  } else if (!self.polling) {\n      self.polling = true;\n      self._poll();\n  }\n  return self;\n};\n\n/**\n * End polling for messages\n *\n * @return {Bot} Self\n */\nBot.prototype.stop = function () {\n  var self = this;\n  self.polling = false;\n  if (self.pollingRequest) {\n      self.pollingRequest.abort();\n  }\n  return self;\n};\n\n/**\n * Returns basic information about the bot in form of a User object.\n *\n * @param {Bot~requestCallback} callback    The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#getme\n */\nBot.prototype.getMe = function (callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  this._get({ method: 'getMe' }, function (err, res) {\n    if (err) {\n      return deferred.reject(err);\n    }\n\n    if (res.ok) {\n      self.id = res.result.id;\n      self.first_name = res.result.first_name;\n      self.username = res.result.username;\n\n      deferred.resolve(res.result);\n    } else {\n      deferred.reject(res);\n    }\n  });\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to get a list of profile pictures for a user.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.user_id   Unique identifier of the target user\n * @param {String=}             options.offset    Sequential number of the first photo to be returned. By default, all photos are returned.\n * @param {Integer=}            options.limit     Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100.\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#getuserprofilephotos\n */\nBot.prototype.getUserProfilePhotos = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  this._get({\n    method: 'getUserProfilePhotos',\n    params: {\n      user_id: options.user_id,\n      offset: options.offset,\n      limit: options.limit\n    }\n   }, function (err, res) {\n    if (err) {\n      return deferred.reject(err);\n    }\n\n    if (res.ok) {\n      deferred.resolve(res.result);\n    } else {\n      deferred.reject(res);\n    }\n  });\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size.\n *\n * @param {Object}              options           Options\n * @param {String}              options.file_id   File identifier to get info about\n * @param {String=}             options.dir       Directory the file to be stored (if it is not specified, no file willbe downloaded)\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#getfile\n */\nBot.prototype.getFile = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  this._get({\n    method: 'getFile',\n    params: {\n      file_id: options.file_id\n    }\n  }, function (err, res) {\n    if (err) {\n      return deferred.reject(err);\n    }\n\n    if (res.ok) {\n      var filename = path.basename(res.result.file_path);\n      if (options.dir) {\n        var filepath  = path.join(options.dir, filename);\n        var url = self.base_url + 'file/bot' + self.token + '/' + res.result.file_path;\n        var destination = fs.createWriteStream(filepath);\n        request(url)\n        .pipe(destination)\n        .on('finish', function () {\n          deferred.resolve({\n            destination: filepath,\n            url: url\n          });\n        })\n        .on('error', function(error){\n          deferred.reject(error);\n        });\n      } else {\n        deferred.resolve({\n          url: url\n        });\n      }\n    } else {\n      deferred.reject(res);\n    }\n  });\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to send text messages.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.chat_id   Unique identifier for the message recipient — User or GroupChat id\n * @param {String}              options.text      Text of the message to be sent\n * @param {String}              options.parse_mode  Send Markdown, if you want Telegram apps to show bold, italic and inline URLs in your bot's message.\n * @param {Boolean=}            options.disable_web_page_preview    Disables link previews for links in this message\n * @param {Integer=}            options.reply_to_message_id   If the message is a reply, ID of the original message\n * @param {Object=}             options.reply_markup    Additional interface options. {@link https://core.telegram.org/bots/api/#replykeyboardmarkup| ReplyKeyboardMarkup}\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#sendmessage\n */\nBot.prototype.sendMessage = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  this._get({\n    method: 'sendMessage',\n    params: {\n      chat_id: options.chat_id,\n      text: options.text,\n      parse_mode: options.parse_mode,\n      disable_web_page_preview: options.disable_web_page_preview,\n      reply_to_message_id: options.reply_to_message_id,\n      reply_markup: JSON.stringify(options.reply_markup)\n    }\n  }, function (err, res) {\n    if (err) {\n      return deferred.reject(err);\n    }\n\n    if (res.ok) {\n      deferred.resolve(res.result);\n    } else {\n      deferred.reject(res);\n    }\n  });\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to forward messages of any kind.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.chat_id   Unique identifier for the message recipient — User or GroupChat id\n * @param {Integer}             options.from_chat_id    Unique identifier for the chat where the original message was sent — User or GroupChat id\n * @param {Integer}             options.message_id    Unique message identifier\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#forwardmessage\n */\nBot.prototype.forwardMessage = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  this._get({\n    method: 'forwardMessage',\n    params: {\n      chat_id: options.chat_id,\n      from_chat_id: options.from_chat_id,\n      message_id: options.message_id\n    }\n  }, function (err, res) {\n    if (err) {\n      return deferred.reject(err);\n    }\n\n    if (res.ok) {\n      deferred.resolve(res.result);\n    } else {\n      deferred.reject(res);\n    }\n  });\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to send photos.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.chat_id   Unique identifier for the message recipient — User or GroupChat id\n * @param {String}              options.photo     Path to photo file (Library will create a stream if the path exist)\n * @param {String=}             options.file_id   If file_id is passed, method will use this instead\n * @param {String=}             options.caption   Photo caption (may also be used when resending photos by file_id).\n * @param {Integer=}            options.reply_to_message_id   If the message is a reply, ID of the original message\n * @param {Object=}             options.reply_markup    Additional interface options. {@link https://core.telegram.org/bots/api/#replykeyboardmarkup| ReplyKeyboardMarkup}\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#sendphoto\n */\nBot.prototype.sendPhoto = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  if (options.file_id) {\n    this._get({\n      method: 'sendPhoto',\n      params: {\n        chat_id: options.chat_id,\n        caption: options.caption,\n        photo: options.file_id,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      }\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  } else {\n    var files;\n    if (options.files.stream) {\n      files = {\n        type: 'photo',\n        filename: options.files.filename,\n        contentType: options.files.contentType,\n        stream: options.files.stream\n      }\n    } else {\n      files = {\n       photo: options.files.photo\n      }\n    }\n\n    this._multipart({\n      method: 'sendPhoto',\n      params: {\n        chat_id: options.chat_id,\n        caption: options.caption,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      },\n      files: files\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  }\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.chat_id   Unique identifier for the message recipient — User or GroupChat id\n * @param {String}              options.audio     Path to audio file (Library will create a stream if the path exist)\n * @param {String=}             options.file_id   If file_id is passed, method will use this instead\n * @param {Integer=}            options.reply_to_message_id   If the message is a reply, ID of the original message\n * @param {Object=}             options.reply_markup    Additional interface options. {@link https://core.telegram.org/bots/api/#replykeyboardmarkup| ReplyKeyboardMarkup}\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#sendaudio\n */\nBot.prototype.sendAudio = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  if (options.file_id) {\n    this._get({\n      method: 'sendAudio',\n      params: {\n        chat_id: options.chat_id,\n        audio: options.file_id,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      }\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  } else {\n    var files;\n    if (options.files.stream) {\n      files = {\n        type: 'audio',\n        filename: options.files.filename,\n        contentType: options.files.contentType,\n        stream: options.files.stream\n      }\n    } else if (mime.lookup(options.files.audio) !== 'audio/ogg') {\n      return Q.reject(new Error('Invalid file type'))\n      .nodeify(callback);\n    } else {\n      files = {\n        audio: options.files.audio\n      }\n    }\n\n    this._multipart({\n      method: 'sendAudio',\n      params: {\n        chat_id: options.chat_id,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      },\n      files: files\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  }\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to send general files.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.chat_id   Unique identifier for the message recipient — User or GroupChat id\n * @param {String}              options.document  Path to document file (Library will create a stream if the path exist)\n * @param {String=}             options.file_id   If file_id is passed, method will use this instead\n * @param {Integer=}            options.reply_to_message_id   If the message is a reply, ID of the original message\n * @param {Object=}             options.reply_markup    Additional interface options. {@link https://core.telegram.org/bots/api/#replykeyboardmarkup| ReplyKeyboardMarkup}\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#senddocument\n */\nBot.prototype.sendDocument = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  if (options.file_id) {\n    this._get({\n      method: 'sendDocument',\n      params: {\n        chat_id: options.chat_id,\n        document: options.file_id,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      }\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  } else {\n    var files;\n    if (options.files.stream) {\n      files = {\n        type: 'document',\n        filename: options.files.filename,\n        contentType: options.files.contentType,\n        stream: options.files.stream\n      }\n    } else {\n      files = {\n        document: options.files.document\n      }\n    }\n\n    this._multipart({\n      method: 'sendDocument',\n      params: {\n        chat_id: options.chat_id,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      },\n      files: files\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  }\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to send .webp stickers.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.chat_id   Unique identifier for the message recipient — User or GroupChat id\n * @param {String}              options.sticker   Path to sticker file (Library will create a stream if the path exist)\n * @param {String=}             options.file_id   If file_id is passed, method will use this instead\n * @param {Integer=}            options.reply_to_message_id   If the message is a reply, ID of the original message\n * @param {Object=}             options.reply_markup    Additional interface options. {@link https://core.telegram.org/bots/api/#replykeyboardmarkup| ReplyKeyboardMarkup}\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#sendsticker\n */\nBot.prototype.sendSticker = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  if (options.file_id) {\n    this._get({\n      method: 'sendSticker',\n      params: {\n        chat_id: options.chat_id,\n        sticker: options.file_id,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      }\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  } else {\n    if (mime.lookup(options.files.sticker) !== 'image/webp') {\n      return Q.reject(new Error('Invalid file type'))\n      .nodeify(callback);\n    }\n\n    this._multipart({\n      method: 'sendSticker',\n      params: {\n        chat_id: options.chat_id,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      },\n      files: {\n        sticker: options.files.sticker\n      }\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  }\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to send video files, Telegram clients support mp4 video.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.chat_id   Unique identifier for the message recipient — User or GroupChat id\n * @param {String}              options.video   Path to video file (Library will create a stream if the path exist)\n * @param {String=}             options.file_id   If file_id is passed, method will use this instead\n * @param {Integer=}            options.reply_to_message_id   If the message is a reply, ID of the original message\n * @param {Object=}             options.reply_markup    Additional interface options. {@link https://core.telegram.org/bots/api/#replykeyboardmarkup| ReplyKeyboardMarkup}\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#sendvideo\n */\nBot.prototype.sendVideo = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  if (options.file_id) {\n    this._get({\n      method: 'sendSticker',\n      params: {\n        chat_id: options.chat_id,\n        video: options.file_id,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      }\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  } else {\n    var files;\n    if (options.files.stream) {\n      files = {\n        type: 'video',\n        filename: options.files.filename,\n        contentType: options.files.contentType,\n        stream: options.files.stream\n      }\n    } else if (mime.lookup(options.files.video.filename) !== 'video/mp4') {\n      return Q.reject(new Error('Invalid file type'))\n      .nodeify(callback);\n    } else {\n      files = {\n        video: options.files.video\n      }\n    }\n\n    this._multipart({\n      method: 'sendVideo',\n      params: {\n        chat_id: options.chat_id,\n        reply_to_message_id: options.reply_to_message_id,\n        reply_markup: JSON.stringify(options.reply_markup)\n      },\n      files: files\n    }, function (err, res) {\n      if (err) {\n        return deferred.reject(err);\n      }\n\n      if (res.ok) {\n        deferred.resolve(res.result);\n      } else {\n        deferred.reject(res);\n      }\n    });\n  }\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method to send point on the map.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.chat_id   Unique identifier for the message recipient — User or GroupChat id\n * @param {Float}               options.latitude  Latitude of location\n * @param {Float}               options.longitude Longitude of location\n * @param {Integer=}            options.reply_to_message_id   If the message is a reply, ID of the original message\n * @param {Object=}             options.reply_markup    Additional interface options. {@link https://core.telegram.org/bots/api/#replykeyboardmarkup| ReplyKeyboardMarkup}\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#sendlocation\n */\nBot.prototype.sendLocation = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  this._get({\n    method: 'sendLocation',\n    params: {\n      chat_id: options.chat_id,\n      latitude: options.latitude,\n      longitude: options.longitude,\n      reply_to_message_id: options.reply_to_message_id,\n      reply_markup: JSON.stringify(options.reply_markup)\n    }\n  }, function (err, res) {\n    if (err) {\n      return deferred.reject(err);\n    }\n\n    if (res.ok) {\n      deferred.resolve(res.result);\n    } else {\n      deferred.reject(res);\n    }\n  });\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Use this method when you need to tell the user that something is happening on the bot's side.\n *\n * @param {Object}              options           Options\n * @param {Integer}             options.chat_id   Unique identifier for the message recipient — User or GroupChat id\n * @param {String}              options.action    Type of action to broadcast.\n * @param {Bot~requestCallback} callback          The callback that handles the response.\n * @return {Promise}  Q Promise\n *\n * @see https://core.telegram.org/bots/api#sendchataction\n */\nBot.prototype.sendChatAction = function (options, callback) {\n  var self = this\n    , deferred = Q.defer();\n\n  this._get({\n    method: 'sendChatAction',\n    params: {\n      chat_id: options.chat_id,\n      action: options.action\n    }\n  }, function (err, res) {\n    if (err) {\n      return deferred.reject(err);\n    }\n\n    if (res.ok) {\n      deferred.resolve(res.result);\n    } else {\n      deferred.reject(res);\n    }\n  });\n\n  return deferred.promise.nodeify(callback);\n};\n\n/**\n * Analytics from http://botan.io/\n * Allows all incoming messages, and you can make tagging, for specific messages\n * bot.analytics.track(message, 'Specific tag');\n *\n * @param  {String} token You can take this token here: https://appmetrica.yandex.com/\n * @return {Bot}          Self\n *\n * @see https://github.com/botanio/sdk\n */\nBot.prototype.enableAnalytics = function(token) {\n  this.analytics = botanio(token);\n\n  return this;\n};\n\nmodule.exports = Bot;\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot/node_modules/node-telegram-bot/gulpfile.js":"var gulp = require('gulp')\n  , eslint = require('gulp-eslint')\n  , mocha = require('gulp-mocha')\n  , shell = require('gulp-shell')\n  , ghpages = require('gh-pages')\n  , path = require('path');\n\ngulp.task('test', function () {\n  return gulp.src('test/index.js', { read: false })\n    .pipe(mocha({reporter: 'spec'}));\n});\n\ngulp.task('lint', function () {\n  return gulp.src(['lib/*.js'])\n    .pipe(eslint())\n    .pipe(eslint.format())\n    .pipe(eslint.failOnError());\n});\n\ngulp.task('doc', shell.task([\n  './node_modules/jsdoc/jsdoc.js lib/*.js -d doc -t ./node_modules/ink-docstrap/template -c jsdoc.conf.json'\n]));\n\ngulp.task('publish', ['doc'], function () {\n  ghpages.publish(path.join(__dirname, 'doc'), console.error);\n});\n\ngulp.task('default', ['lint'], function () {\n    // This will only run if the lint task is successful...\n});\n"}